--- drivers/cpufreq/cpufreq_governor.c
+++ drivers/cpufreq/cpufreq_governor.c
@@ -35,11 +35,15 @@ void dbs_check_cpu(struct dbs_data *dbs_data, int cpu)
 	struct cpu_dbs_common_info *cdbs = dbs_data->cdata->get_cpu_cdbs(cpu);
 	struct od_dbs_tuners *od_tuners = dbs_data->tuners;
 	struct cs_dbs_tuners *cs_tuners = dbs_data->tuners;
+	struct ac_dbs_tuners *ac_tuners = dbs_data->tuners;
+	struct dk_dbs_tuners *dk_tuners = dbs_data->tuners;
+	struct nm_dbs_tuners *nm_tuners = dbs_data->tuners;
 	struct cpufreq_policy *policy;
 	unsigned int sampling_rate;
 	unsigned int max_load = 0;
 	unsigned int ignore_nice;
 	unsigned int j;
+	struct cpufreq_govinfo govinfo;
 
 	if (dbs_data->cdata->governor == GOV_ONDEMAND) {
 		struct od_cpu_dbs_info_s *od_dbs_info =
@@ -55,6 +59,15 @@ void dbs_check_cpu(struct dbs_data *dbs_data, int cpu)
 		sampling_rate *= od_dbs_info->rate_mult;
 
 		ignore_nice = od_tuners->ignore_nice_load;
+	} else if (dbs_data->cdata->governor == GOV_ALUCARD) {
+		sampling_rate = ac_tuners->sampling_rate;
+		ignore_nice = ac_tuners->ignore_nice_load;
+	} else if (dbs_data->cdata->governor == GOV_DARKNESS) {
+		sampling_rate = dk_tuners->sampling_rate;
+		ignore_nice = dk_tuners->ignore_nice_load;
+	} else if (dbs_data->cdata->governor == GOV_NIGHTMARE) {
+		sampling_rate = nm_tuners->sampling_rate;
+		ignore_nice = nm_tuners->ignore_nice_load;	
 	} else {
 		sampling_rate = cs_tuners->sampling_rate;
 		ignore_nice = cs_tuners->ignore_nice_load;
@@ -238,10 +257,24 @@ static void set_sampling_rate(struct dbs_data *dbs_data,
 {
 	if (dbs_data->cdata->governor == GOV_CONSERVATIVE) {
 		struct cs_dbs_tuners *cs_tuners = dbs_data->tuners;
-		cs_tuners->sampling_rate = sampling_rate;
+		cs_tuners->sampling_rate = max(cs_tuners->sampling_rate,
+			sampling_rate);
+	} else if (dbs_data->cdata->governor == GOV_ALUCARD) {
+		struct ac_dbs_tuners *ac_tuners = dbs_data->tuners;
+		ac_tuners->sampling_rate = max(ac_tuners->sampling_rate, 
+			sampling_rate);
+	} else if (dbs_data->cdata->governor == GOV_DARKNESS) {
+		struct dk_dbs_tuners *dk_tuners = dbs_data->tuners;
+		dk_tuners->sampling_rate = max(dk_tuners->sampling_rate, 
+			sampling_rate);
+	} else if (dbs_data->cdata->governor == GOV_NIGHTMARE) {
+		struct nm_dbs_tuners *nm_tuners = dbs_data->tuners;
+		nm_tuners->sampling_rate = max(nm_tuners->sampling_rate, 
+			sampling_rate);
 	} else {
 		struct od_dbs_tuners *od_tuners = dbs_data->tuners;
-		od_tuners->sampling_rate = sampling_rate;
+		od_tuners->sampling_rate = max(od_tuners->sampling_rate, 
+			sampling_rate);
 	}
 }
 
@@ -251,9 +284,18 @@ int cpufreq_governor_dbs(struct cpufreq_policy *policy,
 	struct dbs_data *dbs_data;
 	struct od_cpu_dbs_info_s *od_dbs_info = NULL;
 	struct cs_cpu_dbs_info_s *cs_dbs_info = NULL;
+	struct ac_cpu_dbs_info_s *ac_dbs_info = NULL;
+	struct dk_cpu_dbs_info_s *dk_dbs_info = NULL;
+	struct nm_cpu_dbs_info_s *nm_dbs_info = NULL;
 	struct od_ops *od_ops = NULL;
+	struct ac_ops *ac_ops = NULL;
+	struct dk_ops *dk_ops = NULL;
+	struct nm_ops *nm_ops = NULL;
 	struct od_dbs_tuners *od_tuners = NULL;
 	struct cs_dbs_tuners *cs_tuners = NULL;
+	struct ac_dbs_tuners *ac_tuners = NULL;
+	struct dk_dbs_tuners *dk_tuners = NULL;
+	struct nm_dbs_tuners *nm_tuners = NULL;
 	struct cpu_dbs_common_info *cpu_cdbs;
 	unsigned int sampling_rate, latency, ignore_nice, j, cpu = policy->cpu;
 	int io_busy = 0;
@@ -359,6 +401,24 @@ int cpufreq_governor_dbs(struct cpufreq_policy *policy,
 		cs_dbs_info = dbs_data->cdata->get_cpu_dbs_info_s(cpu);
 		sampling_rate = cs_tuners->sampling_rate;
 		ignore_nice = cs_tuners->ignore_nice_load;
+	} else if (dbs_data->cdata->governor == GOV_ALUCARD) {
+		ac_tuners = dbs_data->tuners;
+		ac_dbs_info = dbs_data->cdata->get_cpu_dbs_info_s(cpu);
+		sampling_rate = ac_tuners->sampling_rate;
+		ignore_nice = ac_tuners->ignore_nice_load;
+		ac_ops = dbs_data->cdata->gov_ops;
+	} else if (dbs_data->cdata->governor == GOV_DARKNESS) {
+		dk_tuners = dbs_data->tuners;
+		dk_dbs_info = dbs_data->cdata->get_cpu_dbs_info_s(cpu);
+		sampling_rate = dk_tuners->sampling_rate;
+		ignore_nice = dk_tuners->ignore_nice_load;
+		dk_ops = dbs_data->cdata->gov_ops;
+	} else if (dbs_data->cdata->governor == GOV_NIGHTMARE) {
+		nm_tuners = dbs_data->tuners;
+		nm_dbs_info = dbs_data->cdata->get_cpu_dbs_info_s(cpu);
+		sampling_rate = nm_tuners->sampling_rate;
+		ignore_nice = nm_tuners->ignore_nice_load;
+		nm_ops = dbs_data->cdata->gov_ops;
 	} else {
 		od_tuners = dbs_data->tuners;
 		od_dbs_info = dbs_data->cdata->get_cpu_dbs_info_s(cpu);
@@ -403,6 +463,15 @@ int cpufreq_governor_dbs(struct cpufreq_policy *policy,
 			cs_dbs_info->down_skip = 0;
 			cs_dbs_info->enable = 1;
 			cs_dbs_info->requested_freq = policy->cur;
+		} else if (dbs_data->cdata->governor == GOV_ALUCARD) {
+			ac_ops->get_cpu_frequency_table(cpu);
+			ac_ops->get_cpu_frequency_table_minmax(policy, cpu);
+			ac_dbs_info->up_rate = 1;
+			ac_dbs_info->down_rate = 1;
+		} else if (dbs_data->cdata->governor == GOV_DARKNESS) {
+			dk_ops->get_cpu_frequency_table(cpu);
+		} else if (dbs_data->cdata->governor == GOV_NIGHTMARE) {
+			nm_ops->get_cpu_frequency_table(cpu);
 		} else {
 			od_dbs_info->rate_mult = 1;
 			od_dbs_info->sample_type = OD_NORMAL_SAMPLE;
